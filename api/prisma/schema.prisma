//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id        Int      @id @default(autoincrement())
  grade     Int
  letter    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lessons              Lesson[]
  idClassLeaderTeacher Int?
  classLeader          Teacher?  @relation("TeacherClassLeadership", fields: [idClassLeaderTeacher], references: [id], onDelete: SetNull)
  
  // Historical student assignments
  studentHistory       StudentClassHistory[]
}

model Classroom {
  id        Int      @id @default(autoincrement())
  number    Int      @unique
  floor     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lessons          Lesson[]
  assignedTeachers Teacher[] @relation("TeacherClassroom")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}


model Lesson {
  id        Int @id @default(autoincrement())
  dayOfWeek Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys - all dependencies are on primary key
  idTeacher Int     @map("id_teacher")
  teacher   Teacher @relation(fields: [idTeacher], references: [id], onDelete: Cascade)

  idClass Int   @map("id_class")
  class   Class @relation(fields: [idClass], references: [id], onDelete: Cascade)

  idSubject Int     @map("id_subject")
  subject   Subject @relation(fields: [idSubject], references: [id], onDelete: Cascade)

  idClassroom Int       @map("id_classroom")
  classroom   Classroom @relation(fields: [idClassroom], references: [id], onDelete: Cascade)

  idLessonSchedule Int            @map("id_lessonSchedule")
  lessonSchedule   LessonSchedule @relation(fields: [idLessonSchedule], references: [id], onDelete: Cascade)

  idScheduleVersion Int             @map("id_scheduleVersion")
  scheduleVersion   ScheduleVersion @relation(fields: [idScheduleVersion], references: [id], onDelete: Cascade)

  @@unique([idTeacher, idClass, idSubject, idClassroom, idScheduleVersion])
}

model LessonSchedule {
    id           Int      @id @default(autoincrement())
    lessonNumber Int
    timeBegin    DateTime @db.Time
    timeEnd      DateTime @db.Time
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    lessons Lesson[]
}


model ScheduleVersion {
  id          Int       @id @default(autoincrement())
  dateBegin   DateTime
  dateEnd     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  lessons Lesson[]
}

model Student {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  middleName     String?
  email          String?
  phone          String?
  enrollmentDate DateTime
  dateBirth      DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  idUser Int? @unique @map("id_user")
  user   User?   @relation(fields: [idUser], references: [id], onDelete: SetNull)

  // Historical class assignments
  classHistory StudentClassHistory[]
}

model StudentClassHistory {
  id        Int       @id @default(autoincrement())
  idStudent Int
  idClass   Int
  dateBegin DateTime
  dateEnd   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  student Student @relation(fields: [idStudent], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [idClass], references: [id], onDelete: Cascade)
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons         Lesson[]
  teacherSubjects TeacherSubject[]
}

model Teacher {
    id         Int      @id @default(autoincrement())
    firstName  String
    lastName   String
    middleName String?
    email      String?
    phone      String?
    isActive   Boolean  @default(true)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    idAssignedClassroom Int?

    // Relations
    idUser   Int?             @unique @map("id_user")
    user     User?            @relation(fields: [idUser], references: [id], onDelete: SetNull)
    subjects TeacherSubject[]
    lessons  Lesson[]

    // Teacher-specific relations
    assignedClassroom Classroom? @relation("TeacherClassroom", fields: [idAssignedClassroom], references: [id], onDelete: SetNull)
    classLeaderships  Class[]    @relation("TeacherClassLeadership")
}


model TeacherSubject {
  id        Int      @id @default(autoincrement())
  idTeacher Int
  idSubject Int
  createdAt DateTime @default(now())

  // Relations
  teacher Teacher @relation(fields: [idTeacher], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [idSubject], references: [id], onDelete: Cascade)

  @@unique([idTeacher, idSubject])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher Teacher?
  student Student?
}
