import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
	console.log("üå± Starting database seeding...");

	// Create users
	const adminUser = await prisma.user.upsert({
		where: { email: "admin@school.com" },
		update: {},
		create: {
			email: "admin@school.com",
			password: await bcrypt.hash("admin123", 10),
			role: "ADMIN",
		},
	});

	const teacherUsers = await Promise.all([
		prisma.user.upsert({
			where: { email: "ivanova@school.com" },
			update: {},
			create: {
				email: "ivanova@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
		prisma.user.upsert({
			where: { email: "petrova@school.com" },
			update: {},
			create: {
				email: "petrova@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
		prisma.user.upsert({
			where: { email: "sidorov@school.com" },
			update: {},
			create: {
				email: "sidorov@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
		prisma.user.upsert({
			where: { email: "kozlov@school.com" },
			update: {},
			create: {
				email: "kozlov@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
		prisma.user.upsert({
			where: { email: "morozova@school.com" },
			update: {},
			create: {
				email: "morozova@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
		prisma.user.upsert({
			where: { email: "volkov@school.com" },
			update: {},
			create: {
				email: "volkov@school.com",
				password: await bcrypt.hash("teacher123", 10),
				role: "TEACHER",
			},
		}),
	]);

	// Create subjects
	const subjects = await Promise.all([
		prisma.subject.upsert({
			where: { name: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" },
			update: {},
			create: {
				name: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
				code: "MATH",
				description: "–ê–ª–≥–µ–±—Ä–∞ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" },
			update: {},
			create: {
				name: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
				code: "RUS",
				description: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" },
			update: {},
			create: {
				name: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
				code: "LIT",
				description: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–§–∏–∑–∏–∫–∞" },
			update: {},
			create: {
				name: "–§–∏–∑–∏–∫–∞",
				code: "PHYS",
				description: "–§–∏–∑–∏–∫–∞ –∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–•–∏–º–∏—è" },
			update: {},
			create: {
				name: "–•–∏–º–∏—è",
				code: "CHEM",
				description: "–•–∏–º–∏—è –∏ –±–∏–æ–ª–æ–≥–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ë–∏–æ–ª–æ–≥–∏—è" },
			update: {},
			create: {
				name: "–ë–∏–æ–ª–æ–≥–∏—è",
				code: "BIOL",
				description: "–ë–∏–æ–ª–æ–≥–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ò—Å—Ç–æ—Ä–∏—è" },
			update: {},
			create: {
				name: "–ò—Å—Ç–æ—Ä–∏—è",
				code: "HIST",
				description: "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" },
			update: {},
			create: {
				name: "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
				code: "SOC",
				description: "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è" },
			update: {},
			create: {
				name: "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
				code: "GEOG",
				description: "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫" },
			update: {},
			create: {
				name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
				code: "ENG",
				description: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" },
			update: {},
			create: {
				name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
				code: "INF",
				description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ê–ª–≥–µ–±—Ä–∞" },
			update: {},
			create: {
				name: "–ê–ª–≥–µ–±—Ä–∞",
				code: "ALG",
				description: "–ê–ª–≥–µ–±—Ä–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ì–µ–æ–º–µ—Ç—Ä–∏—è" },
			update: {},
			create: {
				name: "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
				code: "GEO",
				description: "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ò–ó–û" },
			update: {},
			create: {
				name: "–ò–ó–û",
				code: "IZO",
				description: "–ò—Å–∫—É—Å—Å—Ç–≤–æ",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ú—É–∑—ã–∫–∞" },
			update: {},
			create: {
				name: "–ú—É–∑—ã–∫–∞",
				code: "MUS",
				description: "–ú—É–∑—ã–∫–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" },
			update: {},
			create: {
				name: "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞",
				code: "PE",
				description: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è" },
			update: {},
			create: {
				name: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
				code: "TECH",
				description: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–û–î–ù–ö–ù–†" },
			update: {},
			create: {
				name: "–û–î–ù–ö–ù–†",
				code: "ODN",
				description: "–û—Å–Ω–æ–≤—ã –¥—É—Ö–æ–≤–Ω–æ-–Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç" },
			update: {},
			create: {
				name: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
				code: "IPRJ",
				description: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
			},
		}),
		prisma.subject.upsert({
			where: { name: "–≠–ª–µ–∫—Ç–∏–≤" },
			update: {},
			create: {
				name: "–≠–ª–µ–∫—Ç–∏–≤",
				code: "ELC",
				description: "–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å",
			},
		}),
	]);

	// Create classrooms
	const classrooms = await Promise.all([
		prisma.classroom.upsert({
			where: { number: 101 },
			update: {},
			create: { number: 101, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 102 },
			update: {},
			create: { number: 102, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 201 },
			update: {},
			create: { number: 201, floor: 2 },
		}),
		prisma.classroom.upsert({
			where: { number: 202 },
			update: {},
			create: { number: 202, floor: 2 },
		}),
		prisma.classroom.upsert({
			where: { number: 103 },
			update: {},
			create: { number: 103, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 203 },
			update: {},
			create: { number: 203, floor: 2 },
		}),
		// Additional classrooms for better distribution
		prisma.classroom.upsert({
			where: { number: 104 },
			update: {},
			create: { number: 104, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 105 },
			update: {},
			create: { number: 105, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 106 },
			update: {},
			create: { number: 106, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 107 },
			update: {},
			create: { number: 107, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 108 },
			update: {},
			create: { number: 108, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 109 },
			update: {},
			create: { number: 109, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 115 },
			update: {},
			create: { number: 115, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 116 },
			update: {},
			create: { number: 116, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 117 },
			update: {},
			create: { number: 117, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 118 },
			update: {},
			create: { number: 118, floor: 1 },
		}),
		prisma.classroom.upsert({
			where: { number: 220 },
			update: {},
			create: { number: 220, floor: 2 },
		}),
		prisma.classroom.upsert({
			where: { number: 301 },
			update: {},
			create: { number: 301, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 302 },
			update: {},
			create: { number: 302, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 303 },
			update: {},
			create: { number: 303, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 305 },
			update: {},
			create: { number: 305, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 316 },
			update: {},
			create: { number: 316, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 318 },
			update: {},
			create: { number: 318, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 319 },
			update: {},
			create: { number: 319, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 320 },
			update: {},
			create: { number: 320, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 321 },
			update: {},
			create: { number: 321, floor: 3 },
		}),
		prisma.classroom.upsert({
			where: { number: 324 },
			update: {},
			create: { number: 324, floor: 3 },
		}),
	]);

	// Create teachers (expanded list)
	const teachers = await Promise.all([
		prisma.teacher.create({
			data: {
				firstName: "–ê–Ω–Ω–∞",
				lastName: "–ò–≤–∞–Ω–æ–≤–∞",
				middleName: "–ò–≤–∞–Ω–æ–≤–Ω–∞",
				email: "ivanova@school.com",
				phone: "+7-900-123-45-67",
				isActive: true,
				idAssignedClassroom: classrooms[0].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ú–∞—Ä–∏—è",
				lastName: "–ü–µ—Ç—Ä–æ–≤–∞",
				middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
				email: "petrova@school.com",
				phone: "+7-900-123-45-68",
				isActive: true,
				idAssignedClassroom: classrooms[1].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ü–µ—Ç—Ä",
				lastName: "–°–∏–¥–æ—Ä–æ–≤",
				middleName: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á",
				email: "sidorov@school.com",
				phone: "+7-900-123-45-69",
				isActive: true,
				idAssignedClassroom: classrooms[2].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ê–ª–µ–∫—Å–µ–π",
				lastName: "–ö–æ–∑–ª–æ–≤",
				middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á",
				email: "kozlov@school.com",
				phone: "+7-900-123-45-70",
				isActive: true,
				idAssignedClassroom: classrooms[3].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ï–ª–µ–Ω–∞",
				lastName: "–ú–æ—Ä–æ–∑–æ–≤–∞",
				middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
				email: "morozova@school.com",
				phone: "+7-900-123-45-71",
				isActive: true,
				idAssignedClassroom: classrooms[4].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–î–º–∏—Ç—Ä–∏–π",
				lastName: "–í–æ–ª–∫–æ–≤",
				middleName: "–ù–∏–∫–æ–ª–∞–µ–≤–∏—á",
				email: "volkov@school.com",
				phone: "+7-900-123-45-72",
				isActive: true,
				idAssignedClassroom: classrooms[5].id,
			},
		}),
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∏—Ç–µ–ª—è
		prisma.teacher.create({
			data: {
				firstName: "–°–≤–µ—Ç–ª–∞–Ω–∞",
				lastName: "–ö—É–∑–Ω–µ—Ü–æ–≤–∞",
				email: "kuznetsova@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[0].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ò–≥–æ—Ä—å",
				lastName: "–ù–æ–≤–∏–∫–æ–≤",
				email: "novikov@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[1].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–¢–∞—Ç—å—è–Ω–∞",
				lastName: "–°–æ–∫–æ–ª–æ–≤–∞",
				email: "sokolova@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[2].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–í–ª–∞–¥–∏–º–∏—Ä",
				lastName: "–ú–∏—Ö–∞–π–ª–æ–≤",
				email: "mikhailov@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[3].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–û–ª—å–≥–∞",
				lastName: "–§–µ–¥–æ—Ä–æ–≤–∞",
				email: "fedorova@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[4].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ù–∏–∫–æ–ª–∞–π",
				lastName: "–°–º–∏—Ä–Ω–æ–≤",
				email: "smirnov@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[5].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ì–∞–ª–∏–Ω–∞",
				lastName: "–í–∞—Å–∏–ª—å–µ–≤–∞",
				email: "vasilieva@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[0].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–°–µ—Ä–≥–µ–π",
				lastName: "–ü–∞–≤–ª–æ–≤",
				email: "pavlov@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[1].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ù–∞—Ç–∞–ª—å—è",
				lastName: "–ú–∞–∫–∞—Ä–æ–≤–∞",
				email: "makarova@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[2].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ê–Ω–¥—Ä–µ–π",
				lastName: "–ü–æ–ø–æ–≤",
				email: "popov@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[3].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–ü–æ–ª–∏–Ω–∞",
				lastName: "–°–µ–º–µ–Ω–æ–≤–∞",
				email: "semenova@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[4].id,
			},
		}),
		prisma.teacher.create({
			data: {
				firstName: "–†–æ–º–∞–Ω",
				lastName: "–ó–∞–π—Ü–µ–≤",
				email: "zaytsev@school.com",
				isActive: true,
				idAssignedClassroom: classrooms[5].id,
			},
		}),
	]);

	// Create teacher-subject relationships (expand to cover more teachers)
	await Promise.all([
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[0].id,
					idSubject: subjects[0].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[0].id, idSubject: subjects[0].id },
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[1].id,
					idSubject: subjects[1].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[1].id, idSubject: subjects[1].id },
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[2].id,
					idSubject: subjects[2].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[2].id, idSubject: subjects[2].id },
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[3].id,
					idSubject: subjects[3].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[3].id, idSubject: subjects[3].id },
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[4].id,
					idSubject: subjects[4].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[4].id, idSubject: subjects[4].id },
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[5].id,
					idSubject: subjects[5].id,
				},
			},
			update: {},
			create: { idTeacher: teachers[5].id, idSubject: subjects[5].id },
		}),
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
		// –í—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[4].id,
					idSubject: subjects.find((s) => s.code === "ENG")!.id,
				},
			},
			update: {},
			create: {
				idTeacher: teachers[4].id,
				idSubject: subjects.find((s) => s.code === "ENG")!.id,
			},
		}),
		// –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[2].id,
					idSubject: subjects.find((s) => s.code === "INF")!.id,
				},
			},
			update: {},
			create: {
				idTeacher: teachers[2].id,
				idSubject: subjects.find((s) => s.code === "INF")!.id,
			},
		}),
		prisma.teacherSubject.upsert({
			where: {
				idTeacher_idSubject: {
					idTeacher: teachers[3].id,
					idSubject: subjects.find((s) => s.code === "INF")!.id,
				},
			},
			update: {},
			create: {
				idTeacher: teachers[3].id,
				idSubject: subjects.find((s) => s.code === "INF")!.id,
			},
		}),
		// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∏—Ç–µ–ª–µ–π
		// –ê–ª–≥–µ–±—Ä–∞/–ì–µ–æ–º–µ—Ç—Ä–∏—è
		...[
			{ teacher: 6, subjCode: "ALG" },
			{ teacher: 6, subjCode: "GEO" },
			{ teacher: 7, subjCode: "MATH" },
			{ teacher: 7, subjCode: "ALG" },
			{ teacher: 8, subjCode: "GEO" },
			{ teacher: 9, subjCode: "RUS" },
			{ teacher: 10, subjCode: "LIT" },
			{ teacher: 11, subjCode: "PHYS" },
			{ teacher: 12, subjCode: "CHEM" },
			{ teacher: 6, subjCode: "SOC" },
			{ teacher: 7, subjCode: "GEOG" },
			{ teacher: 8, subjCode: "BIOL" },
			{ teacher: 9, subjCode: "IZO" },
			{ teacher: 10, subjCode: "MUS" },
			{ teacher: 11, subjCode: "PE" },
			{ teacher: 12, subjCode: "ODN" },
		].map(({ teacher, subjCode }) =>
			prisma.teacherSubject.upsert({
				where: {
					idTeacher_idSubject: {
						idTeacher: teachers[teacher].id,
						idSubject: subjects.find((s) => s.code === subjCode)!
							.id,
					},
				},
				update: {},
				create: {
					idTeacher: teachers[teacher].id,
					idSubject: subjects.find((s) => s.code === subjCode)!.id,
				},
			})
		),
	]);

	// Create classes
	const classes = await Promise.all([
		prisma.class.create({
			data: {
				grade: 10,
				letter: "–ê",
				idClassLeaderTeacher: teachers[0].id,
			},
		}),
		prisma.class.create({
			data: {
				grade: 10,
				letter: "–ë",
				idClassLeaderTeacher: teachers[1].id,
			},
		}),
		prisma.class.create({
			data: {
				grade: 11,
				letter: "–ê",
				idClassLeaderTeacher: teachers[2].id,
			},
		}),
		prisma.class.create({
			data: {
				grade: 11,
				letter: "–ë",
				idClassLeaderTeacher: teachers[3].id,
			},
		}),
	]);

	// Create lesson schedule (6 lessons per day)
	const lessonSchedules = await Promise.all([
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 1,
				timeBegin: new Date("1970-01-01T08:00:00Z"),
				timeEnd: new Date("1970-01-01T08:45:00Z"),
			},
		}),
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 2,
				timeBegin: new Date("1970-01-01T08:55:00Z"),
				timeEnd: new Date("1970-01-01T09:40:00Z"),
			},
		}),
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 3,
				timeBegin: new Date("1970-01-01T10:00:00Z"),
				timeEnd: new Date("1970-01-01T10:45:00Z"),
			},
		}),
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 4,
				timeBegin: new Date("1970-01-01T10:55:00Z"),
				timeEnd: new Date("1970-01-01T11:40:00Z"),
			},
		}),
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 5,
				timeBegin: new Date("1970-01-01T12:00:00Z"),
				timeEnd: new Date("1970-01-01T12:45:00Z"),
			},
		}),
		prisma.lessonSchedule.create({
			data: {
				lessonNumber: 6,
				timeBegin: new Date("1970-01-01T12:55:00Z"),
				timeEnd: new Date("1970-01-01T13:40:00Z"),
			},
		}),
	]);

	// Create schedule version
	const scheduleVersion = await prisma.scheduleVersion.upsert({
		where: { id: 1 },
		update: {},
		create: {
			id: 1,
			dateBegin: new Date("2024-09-01"),
			dateEnd: new Date("2026-12-31"),
			description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2024-2026",
		},
	});

	// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–∏–¥–µ—Ä–∞)
	const delSubs = await prisma.substitution.deleteMany({});
	const delLessons = await prisma.lesson.deleteMany({});
	const delMemberships = await prisma.classGroupMembership.deleteMany({});
	const delGroups = await prisma.classGroup.deleteMany({});
	console.log(
		`üßπ Cleared: substitutions=${delSubs.count}, lessons=${delLessons.count}, groupMemberships=${delMemberships.count}, groups=${delGroups.count}`
	);

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –∑–∞–Ω—è—Ç–æ—Å—Ç—å —É—á–∏—Ç–µ–ª–µ–π –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ–¥ –≥—Ä—É–ø–ø—ã
	const teacherBusy = new Set<string>(); // `${teacherId}:${day}:${lessonNumber}`
	const classroomBusy = new Set<string>(); // `${classroomId}:${day}:${lessonNumber}`
	const slotKey = (day: number, num: number) => `${day}:${num}`;

	// –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —É—á–∏—Ç–µ–ª–µ–π
	const reservedSlotsByClass = new Map<
		number,
		{ ENG: [number, number]; INF: [number, number]; ELC: [number, number] }
	>();
	classes.forEach((c, idx) => {
		// –í–∞—Ä—å–∏—Ä—É–µ–º –¥–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
		const engDay = ((idx + 0) % 5) + 1; // 1..5
		const infDay = ((idx + 2) % 5) + 1;
		const elcDay = ((idx + 4) % 5) + 1;
		reservedSlotsByClass.set(c.id, {
			ENG: [engDay, 2], // 2-–π —É—Ä–æ–∫
			INF: [infDay, 4], // 4-–π —É—Ä–æ–∫
			ELC: [elcDay, 6], // 6-–π —É—Ä–æ–∫
		});
	});

	// Create lessons with conflict checks (6 per day), excluding group subjects from base
	const lessons = [];
	const groupSubjectCodes = ["ENG", "INF", "ELC"] as const;
	const nonGroupSubjects = subjects.filter(
		(s) => !groupSubjectCodes.includes(s.code as any) && s.code !== "TECH"
	); // –∏—Å–∫–ª—é—á–∞–µ–º –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—é

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—á–∏—Ç–µ–ª—è/–∫–∞–±–∏–Ω–µ—Ç –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
	const pickFreeTeacher = (
		day: number,
		num: number,
		subjectId: number
	): number => {
		for (const t of teachers) {
			const key = `${t.id}:${day}:${num}`;
			if (!teacherBusy.has(key)) {
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É—á–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ –≤ teacherSubject
				// –£–ø—Ä–æ—Å—Ç–∏–º: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
				return t.id;
			}
		}
		return teachers[0].id;
	};
	const pickFreeClassroom = (day: number, num: number): number => {
		for (const c of classrooms) {
			const key = `${c.id}:${day}:${num}`;
			if (!classroomBusy.has(key)) return c.id;
		}
		return classrooms[0].id;
	};

	for (const classItem of classes) {
		const reserved = reservedSlotsByClass.get(classItem.id)!;
		for (let dayOfWeek = 1; dayOfWeek <= 5; dayOfWeek++) {
			for (let lessonNumber = 1; lessonNumber <= 6; lessonNumber++) {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ–¥ –≥—Ä—É–ø–ø—ã
				const isReserved =
					(reserved.ENG[0] === dayOfWeek &&
						reserved.ENG[1] === lessonNumber) ||
					(reserved.INF[0] === dayOfWeek &&
						reserved.INF[1] === lessonNumber) ||
					(reserved.ELC[0] === dayOfWeek &&
						reserved.ELC[1] === lessonNumber);
				if (isReserved) continue;

				const subject =
					nonGroupSubjects[
						(classItem.id + dayOfWeek + lessonNumber) %
							nonGroupSubjects.length
					];
				const teacherId = pickFreeTeacher(
					dayOfWeek,
					lessonNumber,
					subject.id
				);
				const classroomId = pickFreeClassroom(dayOfWeek, lessonNumber);
				const busyTKey = `${teacherId}:${dayOfWeek}:${lessonNumber}`;
				const busyCKey = `${classroomId}:${dayOfWeek}:${lessonNumber}`;
				if (teacherBusy.has(busyTKey) || classroomBusy.has(busyCKey))
					continue;

				const lesson = await prisma.lesson.create({
					data: {
						dayOfWeek,
						idTeacher: teacherId,
						idClass: classItem.id,
						idSubject: subject.id,
						idClassroom: classroomId,
						idLessonSchedule: lessonSchedules[lessonNumber - 1].id,
						idScheduleVersion: scheduleVersion.id,
					},
				});
				teacherBusy.add(busyTKey);
				classroomBusy.add(busyCKey);
				lessons.push(lesson);
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –∏ —ç–ª–µ–∫—Ç–∏–≤—É –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
	const engSubject = subjects.find((s) => s.code === "ENG")!;
	const infSubject = subjects.find((s) => s.code === "INF")!;
	const elcSubject = subjects.find((s) => s.code === "ELC")!;

	for (const classItem of classes) {
		// –°–æ–∑–¥–∞–µ–º –ø–æ –¥–≤–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
		const engGroup1 = await prisma.classGroup.create({
			data: {
				idClass: classItem.id,
				idSubject: engSubject.id,
				idScheduleVersion: scheduleVersion.id,
				name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (1)",
			},
		});
		const engGroup2 = await prisma.classGroup.create({
			data: {
				idClass: classItem.id,
				idSubject: engSubject.id,
				idScheduleVersion: scheduleVersion.id,
				name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (2)",
			},
		});

		const infGroup1 = await prisma.classGroup.create({
			data: {
				idClass: classItem.id,
				idSubject: infSubject.id,
				idScheduleVersion: scheduleVersion.id,
				name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (1)",
			},
		});
		const infGroup2 = await prisma.classGroup.create({
			data: {
				idClass: classItem.id,
				idSubject: infSubject.id,
				idScheduleVersion: scheduleVersion.id,
				name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (2)",
			},
		});

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é)
		const classStudents = await prisma.student.findMany({
			where: {
				classHistory: {
					some: {
						idClass: classItem.id,
						dateEnd: null,
					},
				},
			},
		});

		for (let i = 0; i < classStudents.length; i++) {
			const student = classStudents[i];
			const targetEngGroup = i % 2 === 0 ? engGroup1 : engGroup2;
			const targetInfGroup = i % 2 === 0 ? infGroup1 : infGroup2;

			await prisma.classGroupMembership.create({
				data: {
					idClassGroup: targetEngGroup.id,
					idStudent: student.id,
					dateBegin: scheduleVersion.dateBegin,
				},
			});
			await prisma.classGroupMembership.create({
				data: {
					idClassGroup: targetInfGroup.id,
					idStudent: student.id,
					dateBegin: scheduleVersion.dateBegin,
				},
			});
		}

		// –ì—Ä—É–ø–ø–æ–≤—ã–µ —É—Ä–æ–∫–∏ –ø–æ —Å–ª–æ—Ç–∞–º –∏–∑ reservedSlotsByClass
		const rsv = reservedSlotsByClass.get(classItem.id)!;
		const [engDay, engNum] = rsv.ENG;
		const [infDay, infNum] = rsv.INF;
		const [elcDay, elcNum] = rsv.ELC;
		const engTeacherA = teachers[5];
		const engTeacherB = teachers[4];
		const infTeacherA = teachers[2];
		const infTeacherB = teachers[3];
		const elcTeacherA = teachers[0];
		const elcTeacherB = teachers[1];

		// –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî –¥–≤–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö
		// ENG –¥–≤–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		await prisma.lesson.create({
			data: {
				dayOfWeek: engDay,
				idTeacher: engTeacherA.id,
				idClass: classItem.id,
				idSubject: engSubject.id,
				idClassroom: classrooms[0].id,
				idLessonSchedule: lessonSchedules[engNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: engGroup1.id,
			},
		});
		await prisma.lesson.create({
			data: {
				dayOfWeek: engDay,
				idTeacher: engTeacherB.id,
				idClass: classItem.id,
				idSubject: engSubject.id,
				idClassroom: classrooms[1].id,
				idLessonSchedule: lessonSchedules[engNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: engGroup2.id,
			},
		});

		// INF –¥–≤–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		await prisma.lesson.create({
			data: {
				dayOfWeek: infDay,
				idTeacher: infTeacherA.id,
				idClass: classItem.id,
				idSubject: infSubject.id,
				idClassroom: classrooms[2].id,
				idLessonSchedule: lessonSchedules[infNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: infGroup1.id,
			},
		});
		await prisma.lesson.create({
			data: {
				dayOfWeek: infDay,
				idTeacher: infTeacherB.id,
				idClass: classItem.id,
				idSubject: infSubject.id,
				idClassroom: classrooms[3].id,
				idLessonSchedule: lessonSchedules[infNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: infGroup2.id,
			},
		});

		// –≠–ª–µ–∫—Ç–∏–≤ ‚Äî –¥–≤–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
		await prisma.lesson.create({
			data: {
				dayOfWeek: elcDay,
				idTeacher: elcTeacherA.id,
				idClass: classItem.id,
				idSubject: elcSubject.id,
				idClassroom: classrooms[4].id,
				idLessonSchedule: lessonSchedules[elcNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: engGroup1.id,
			},
		});
		await prisma.lesson.create({
			data: {
				dayOfWeek: elcDay,
				idTeacher: elcTeacherB.id,
				idClass: classItem.id,
				idSubject: elcSubject.id,
				idClassroom: classrooms[5].id,
				idLessonSchedule: lessonSchedules[elcNum - 1].id,
				idScheduleVersion: scheduleVersion.id,
				idClassGroup: engGroup2.id,
			},
		});
	}

	// Create some students
	const students = await Promise.all([
		prisma.student.create({
			data: {
				firstName: "–ò–≤–∞–Ω",
				lastName: "–ü–µ—Ç—Ä–æ–≤",
				middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á",
				email: "ivan.petrov@student.com",
				phone: "+7-900-200-01-01",
				enrollmentDate: new Date("2024-09-01"),
				dateBirth: new Date("2007-05-15"),
				isActive: true,
			},
		}),
		prisma.student.create({
			data: {
				firstName: "–ú–∞—Ä–∏—è",
				lastName: "–°–∏–¥–æ—Ä–æ–≤–∞",
				middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
				email: "maria.sidorova@student.com",
				phone: "+7-900-200-01-02",
				enrollmentDate: new Date("2024-09-01"),
				dateBirth: new Date("2007-08-22"),
				isActive: true,
			},
		}),
		prisma.student.create({
			data: {
				firstName: "–ê–ª–µ–∫—Å–µ–π",
				lastName: "–ö–æ–∑–ª–æ–≤",
				middleName: "–î–º–∏—Ç—Ä–∏–µ–≤–∏—á",
				email: "alexey.kozlov@student.com",
				phone: "+7-900-200-01-03",
				enrollmentDate: new Date("2024-09-01"),
				dateBirth: new Date("2006-12-10"),
				isActive: true,
			},
		}),
		prisma.student.create({
			data: {
				firstName: "–ï–ª–µ–Ω–∞",
				lastName: "–ú–æ—Ä–æ–∑–æ–≤–∞",
				middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
				email: "elena.morozova@student.com",
				phone: "+7-900-200-01-04",
				enrollmentDate: new Date("2024-09-01"),
				dateBirth: new Date("2006-03-18"),
				isActive: true,
			},
		}),
	]);

	// Create student class history
	await Promise.all([
		prisma.studentClassHistory.create({
			data: {
				idStudent: students[0].id,
				idClass: classes[0].id,
				dateBegin: new Date("2024-09-01"),
			},
		}),
		prisma.studentClassHistory.create({
			data: {
				idStudent: students[1].id,
				idClass: classes[0].id,
				dateBegin: new Date("2024-09-01"),
			},
		}),
		prisma.studentClassHistory.create({
			data: {
				idStudent: students[2].id,
				idClass: classes[2].id,
				dateBegin: new Date("2024-09-01"),
			},
		}),
		prisma.studentClassHistory.create({
			data: {
				idStudent: students[3].id,
				idClass: classes[2].id,
				dateBegin: new Date("2024-09-01"),
			},
		}),
	]);

	// Create sample substitutions on specific dates
	const substitutionDate1 = new Date("2025-09-19"); // Friday
	const substitutionDate2 = new Date("2025-09-22"); // Monday

	// Helper to pick a different teacher/classroom
	const pickDifferentTeacher = (currentTeacherId: number) => {
		const alt = teachers.find((t) => t.id !== currentTeacherId);
		return alt ? alt.id : teachers[0].id;
	};

	const pickDifferentClassroom = (currentClassroomId: number) => {
		const alt = classrooms.find((c) => c.id !== currentClassroomId);
		return alt ? alt.id : classrooms[0].id;
	};

	// Two substitutions for Friday (Sep 19) for first class
	const fridayLessons = await prisma.lesson.findMany({
		where: {
			dayOfWeek: 5,
			idClass: classes[0].id,
			idScheduleVersion: scheduleVersion.id,
		},
		orderBy: { lessonSchedule: { lessonNumber: "asc" } },
		take: 2,
	});

	for (const lesson of fridayLessons) {
		await prisma.substitution.upsert({
			where: {
				idLesson_date: { idLesson: lesson.id, date: substitutionDate1 },
			},
			update: {},
			create: {
				date: substitutionDate1,
				idLesson: lesson.id,
				idTeacher: pickDifferentTeacher(lesson.idTeacher),
				idClassroom: pickDifferentClassroom(lesson.idClassroom),
			},
		});
	}

	// Two substitutions for Monday (Sep 22) for second class
	const mondayLessons = await prisma.lesson.findMany({
		where: {
			dayOfWeek: 1,
			idClass: classes[1].id,
			idScheduleVersion: scheduleVersion.id,
		},
		orderBy: { lessonSchedule: { lessonNumber: "asc" } },
		take: 2,
	});

	for (const lesson of mondayLessons) {
		await prisma.substitution.upsert({
			where: {
				idLesson_date: { idLesson: lesson.id, date: substitutionDate2 },
			},
			update: {},
			create: {
				date: substitutionDate2,
				idLesson: lesson.id,
				idTeacher: pickDifferentTeacher(lesson.idTeacher),
				idClassroom: pickDifferentClassroom(lesson.idClassroom),
			},
		});
	}

	console.log("üéâ Database seeding completed successfully!");
	console.log(`üìä Summary:`);
	console.log(`   - Users: ${1 + teacherUsers.length}`);
	console.log(`   - Teachers: ${teachers.length}`);
	console.log(`   - Classes: ${classes.length}`);
	console.log(`   - Subjects: ${subjects.length}`);
	console.log(`   - Classrooms: ${classrooms.length}`);
	console.log(`   - Lesson schedules: ${lessonSchedules.length}`);
	console.log(
		`   - Lessons: ${lessons.length} (${classes.length} classes √ó 5 days √ó 6 lessons)`
	);
	console.log(`   - Students: ${students.length}`);
}

main()
	.catch((e) => {
		console.error("‚ùå Error during seeding:", e);
		process.exit(1);
	})
	.finally(async () => {
		await prisma.$disconnect();
	});
