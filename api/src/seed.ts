import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Create users
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@school.com' },
    update: {},
    create: {
      email: 'admin@school.com',
      password: await bcrypt.hash('admin123', 10),
      role: 'ADMIN',
    },
  });

  const teacherUsers = await Promise.all([
    prisma.user.upsert({
      where: { email: 'ivanova@school.com' },
      update: {},
      create: {
        email: 'ivanova@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
    prisma.user.upsert({
      where: { email: 'petrova@school.com' },
      update: {},
      create: {
        email: 'petrova@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
    prisma.user.upsert({
      where: { email: 'sidorov@school.com' },
      update: {},
      create: {
        email: 'sidorov@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
    prisma.user.upsert({
      where: { email: 'kozlov@school.com' },
      update: {},
      create: {
        email: 'kozlov@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
    prisma.user.upsert({
      where: { email: 'morozova@school.com' },
      update: {},
      create: {
        email: 'morozova@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
    prisma.user.upsert({
      where: { email: 'volkov@school.com' },
      update: {},
      create: {
        email: 'volkov@school.com',
        password: await bcrypt.hash('teacher123', 10),
        role: 'TEACHER',
      },
    }),
  ]);


  // Create subjects
  const subjects = await Promise.all([
    prisma.subject.upsert({
      where: { name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' },
      update: {},
      create: { 
        name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        code: 'MATH',
        description: '–ê–ª–≥–µ–±—Ä–∞ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è'
      },
    }),
    prisma.subject.upsert({
      where: { name: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫' },
      update: {},
      create: { 
        name: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        code: 'RUS',
        description: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'
      },
    }),
    prisma.subject.upsert({
      where: { name: '–§–∏–∑–∏–∫–∞' },
      update: {},
      create: { 
        name: '–§–∏–∑–∏–∫–∞',
        code: 'PHYS',
        description: '–§–∏–∑–∏–∫–∞ –∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è'
      },
    }),
    prisma.subject.upsert({
      where: { name: '–•–∏–º–∏—è' },
      update: {},
      create: { 
        name: '–•–∏–º–∏—è',
        code: 'CHEM',
        description: '–•–∏–º–∏—è –∏ –±–∏–æ–ª–æ–≥–∏—è'
      },
    }),
    prisma.subject.upsert({
      where: { name: '–ò—Å—Ç–æ—Ä–∏—è' },
      update: {},
      create: { 
        name: '–ò—Å—Ç–æ—Ä–∏—è',
        code: 'HIST',
        description: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–∞'
      },
    }),
    prisma.subject.upsert({
      where: { name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫' },
      update: {},
      create: { 
        name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
        code: 'ENG',
        description: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'
      },
    }),
  ]);


  // Create classrooms
  const classrooms = await Promise.all([
    prisma.classroom.upsert({
      where: { number: 101 },
      update: {},
      create: { number: 101, floor: 1 },
    }),
    prisma.classroom.upsert({
      where: { number: 102 },
      update: {},
      create: { number: 102, floor: 1 },
    }),
    prisma.classroom.upsert({
      where: { number: 201 },
      update: {},
      create: { number: 201, floor: 2 },
    }),
    prisma.classroom.upsert({
      where: { number: 202 },
      update: {},
      create: { number: 202, floor: 2 },
    }),
    prisma.classroom.upsert({
      where: { number: 103 },
      update: {},
      create: { number: 103, floor: 1 },
    }),
    prisma.classroom.upsert({
      where: { number: 203 },
      update: {},
      create: { number: 203, floor: 2 },
    }),
  ]);


  // Create teachers
  const teachers = await Promise.all([
    prisma.teacher.create({
      data: {
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        middleName: '–ò–≤–∞–Ω–æ–≤–Ω–∞',
        email: 'ivanova@school.com',
        phone: '+7-900-123-45-67',
        isActive: true,
        idAssignedClassroom: classrooms[0].id,
      },
    }),
    prisma.teacher.create({
      data: {
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
        middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        email: 'petrova@school.com',
        phone: '+7-900-123-45-68',
        isActive: true,
        idAssignedClassroom: classrooms[1].id,
      },
    }),
    prisma.teacher.create({
      data: {
        firstName: '–ü–µ—Ç—Ä',
        lastName: '–°–∏–¥–æ—Ä–æ–≤',
        middleName: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á',
        email: 'sidorov@school.com',
        phone: '+7-900-123-45-69',
        isActive: true,
        idAssignedClassroom: classrooms[2].id,
      },
    }),
    prisma.teacher.create({
      data: {
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ö–æ–∑–ª–æ–≤',
        middleName: '–°–µ—Ä–≥–µ–µ–≤–∏—á',
        email: 'kozlov@school.com',
        phone: '+7-900-123-45-70',
        isActive: true,
        idAssignedClassroom: classrooms[3].id,
      },
    }),
    prisma.teacher.create({
      data: {
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ú–æ—Ä–æ–∑–æ–≤–∞',
        middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
        email: 'morozova@school.com',
        phone: '+7-900-123-45-71',
        isActive: true,
        idAssignedClassroom: classrooms[4].id,
      },
    }),
    prisma.teacher.create({
      data: {
        firstName: '–î–º–∏—Ç—Ä–∏–π',
        lastName: '–í–æ–ª–∫–æ–≤',
        middleName: '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
        email: 'volkov@school.com',
        phone: '+7-900-123-45-72',
        isActive: true,
        idAssignedClassroom: classrooms[5].id,
      },
    }),
  ]);


  // Create teacher-subject relationships
  await Promise.all([
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[0].id, idSubject: subjects[0].id } },
      update: {},
      create: { idTeacher: teachers[0].id, idSubject: subjects[0].id },
    }),
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[1].id, idSubject: subjects[1].id } },
      update: {},
      create: { idTeacher: teachers[1].id, idSubject: subjects[1].id },
    }),
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[2].id, idSubject: subjects[2].id } },
      update: {},
      create: { idTeacher: teachers[2].id, idSubject: subjects[2].id },
    }),
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[3].id, idSubject: subjects[3].id } },
      update: {},
      create: { idTeacher: teachers[3].id, idSubject: subjects[3].id },
    }),
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[4].id, idSubject: subjects[4].id } },
      update: {},
      create: { idTeacher: teachers[4].id, idSubject: subjects[4].id },
    }),
    prisma.teacherSubject.upsert({
      where: { idTeacher_idSubject: { idTeacher: teachers[5].id, idSubject: subjects[5].id } },
      update: {},
      create: { idTeacher: teachers[5].id, idSubject: subjects[5].id },
    }),
  ]);


  // Create classes
  const classes = await Promise.all([
    prisma.class.create({
      data: { 
        grade: 10, 
        letter: '–ê',
        idClassLeaderTeacher: teachers[0].id,
      },
    }),
    prisma.class.create({
      data: { 
        grade: 10, 
        letter: '–ë',
        idClassLeaderTeacher: teachers[1].id,
      },
    }),
    prisma.class.create({
      data: { 
        grade: 11, 
        letter: '–ê',
        idClassLeaderTeacher: teachers[2].id,
      },
    }),
    prisma.class.create({
      data: { 
        grade: 11, 
        letter: '–ë',
        idClassLeaderTeacher: teachers[3].id,
      },
    }),
  ]);


  // Create lesson schedule (6 lessons per day)
  const lessonSchedules = await Promise.all([
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 1,
        timeBegin: new Date('1970-01-01T08:00:00Z'),
        timeEnd: new Date('1970-01-01T08:45:00Z'),
      },
    }),
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 2,
        timeBegin: new Date('1970-01-01T08:55:00Z'),
        timeEnd: new Date('1970-01-01T09:40:00Z'),
      },
    }),
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 3,
        timeBegin: new Date('1970-01-01T10:00:00Z'),
        timeEnd: new Date('1970-01-01T10:45:00Z'),
      },
    }),
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 4,
        timeBegin: new Date('1970-01-01T10:55:00Z'),
        timeEnd: new Date('1970-01-01T11:40:00Z'),
      },
    }),
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 5,
        timeBegin: new Date('1970-01-01T12:00:00Z'),
        timeEnd: new Date('1970-01-01T12:45:00Z'),
      },
    }),
    prisma.lessonSchedule.create({
      data: {
        lessonNumber: 6,
        timeBegin: new Date('1970-01-01T12:55:00Z'),
        timeEnd: new Date('1970-01-01T13:40:00Z'),
      },
    }),
  ]);


  // Create schedule version
  const scheduleVersion = await prisma.scheduleVersion.upsert({
    where: { id: 1 },
    update: {},
    create: {
      id: 1,
      dateBegin: new Date('2024-09-01'),
      dateEnd: new Date('2026-12-31'),
      description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2024-2026',
    },
  });


  // Create lessons for each class (6 lessons per day, 5 days per week)
  const lessons = [];
  
  for (const classItem of classes) {
    for (let dayOfWeek = 1; dayOfWeek <= 5; dayOfWeek++) {
      for (let lessonNumber = 1; lessonNumber <= 6; lessonNumber++) {
        const subjectIndex = (lessonNumber - 1) % subjects.length;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞, –¥–Ω—è –∏ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª–µ–π
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        const teacherIndex = (classItem.id + dayOfWeek + lessonNumber) % teachers.length;
        const classroomIndex = ((lessonNumber - 1) + classItem.id + dayOfWeek) % classrooms.length;
        
        const lesson = await prisma.lesson.create({
          data: {
            dayOfWeek,
            idTeacher: teachers[teacherIndex].id,
            idClass: classItem.id,
            idSubject: subjects[subjectIndex].id,
            idClassroom: classrooms[classroomIndex].id,
            idLessonSchedule: lessonSchedules[lessonNumber - 1].id,
            idScheduleVersion: scheduleVersion.id,
          },
        });
        
        lessons.push(lesson);
      }
    }
  }


  // Create some students
  const students = await Promise.all([
    prisma.student.create({
      data: {
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        middleName: '–°–µ—Ä–≥–µ–µ–≤–∏—á',
        email: 'ivan.petrov@student.com',
        phone: '+7-900-200-01-01',
        enrollmentDate: new Date('2024-09-01'),
        dateBirth: new Date('2007-05-15'),
        isActive: true,
      },
    }),
    prisma.student.create({
      data: {
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
        middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
        email: 'maria.sidorova@student.com',
        phone: '+7-900-200-01-02',
        enrollmentDate: new Date('2024-09-01'),
        dateBirth: new Date('2007-08-22'),
        isActive: true,
      },
    }),
    prisma.student.create({
      data: {
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ö–æ–∑–ª–æ–≤',
        middleName: '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á',
        email: 'alexey.kozlov@student.com',
        phone: '+7-900-200-01-03',
        enrollmentDate: new Date('2024-09-01'),
        dateBirth: new Date('2006-12-10'),
        isActive: true,
      },
    }),
    prisma.student.create({
      data: {
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ú–æ—Ä–æ–∑–æ–≤–∞',
        middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        email: 'elena.morozova@student.com',
        phone: '+7-900-200-01-04',
        enrollmentDate: new Date('2024-09-01'),
        dateBirth: new Date('2006-03-18'),
        isActive: true,
      },
    }),
  ]);


  // Create student class history
  await Promise.all([
    prisma.studentClassHistory.create({
      data: {
        idStudent: students[0].id,
        idClass: classes[0].id,
        dateBegin: new Date('2024-09-01'),
      },
    }),
    prisma.studentClassHistory.create({
      data: {
        idStudent: students[1].id,
        idClass: classes[0].id,
        dateBegin: new Date('2024-09-01'),
      },
    }),
    prisma.studentClassHistory.create({
      data: {
        idStudent: students[2].id,
        idClass: classes[2].id,
        dateBegin: new Date('2024-09-01'),
      },
    }),
    prisma.studentClassHistory.create({
      data: {
        idStudent: students[3].id,
        idClass: classes[2].id,
        dateBegin: new Date('2024-09-01'),
      },
    }),
  ]);


  // Create sample substitutions on specific dates
  const substitutionDate1 = new Date('2025-09-19'); // Friday
  const substitutionDate2 = new Date('2025-09-22'); // Monday

  // Helper to pick a different teacher/classroom
  const pickDifferentTeacher = (currentTeacherId: number) => {
    const alt = teachers.find((t) => t.id !== currentTeacherId);
    return alt ? alt.id : teachers[0].id;
  };

  const pickDifferentClassroom = (currentClassroomId: number) => {
    const alt = classrooms.find((c) => c.id !== currentClassroomId);
    return alt ? alt.id : classrooms[0].id;
  };

  // Two substitutions for Friday (Sep 19) for first class
  const fridayLessons = await prisma.lesson.findMany({
    where: {
      dayOfWeek: 5,
      idClass: classes[0].id,
      idScheduleVersion: scheduleVersion.id,
    },
    orderBy: { lessonSchedule: { lessonNumber: 'asc' } },
    take: 2,
  });

  for (const lesson of fridayLessons) {
    await prisma.substitution.upsert({
      where: {
        idLesson_date: { idLesson: lesson.id, date: substitutionDate1 },
      },
      update: {},
      create: {
        date: substitutionDate1,
        idLesson: lesson.id,
        idTeacher: pickDifferentTeacher(lesson.idTeacher),
        idClassroom: pickDifferentClassroom(lesson.idClassroom),
      },
    });
  }

  // Two substitutions for Monday (Sep 22) for second class
  const mondayLessons = await prisma.lesson.findMany({
    where: {
      dayOfWeek: 1,
      idClass: classes[1].id,
      idScheduleVersion: scheduleVersion.id,
    },
    orderBy: { lessonSchedule: { lessonNumber: 'asc' } },
    take: 2,
  });

  for (const lesson of mondayLessons) {
    await prisma.substitution.upsert({
      where: {
        idLesson_date: { idLesson: lesson.id, date: substitutionDate2 },
      },
      update: {},
      create: {
        date: substitutionDate2,
        idLesson: lesson.id,
        idTeacher: pickDifferentTeacher(lesson.idTeacher),
        idClassroom: pickDifferentClassroom(lesson.idClassroom),
      },
    });
  }


  console.log('üéâ Database seeding completed successfully!');
  console.log(`üìä Summary:`);
  console.log(`   - Users: ${1 + teacherUsers.length}`);
  console.log(`   - Teachers: ${teachers.length}`);
  console.log(`   - Classes: ${classes.length}`);
  console.log(`   - Subjects: ${subjects.length}`);
  console.log(`   - Classrooms: ${classrooms.length}`);
  console.log(`   - Lesson schedules: ${lessonSchedules.length}`);
  console.log(`   - Lessons: ${lessons.length} (${classes.length} classes √ó 5 days √ó 6 lessons)`);
  console.log(`   - Students: ${students.length}`);
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });